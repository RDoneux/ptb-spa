pipeline {
    
    agent any

    environment {
        DOCKER_IMAGE = 'rdoneux/ptb-spa'

        // can use "pulumi stack -Q" to find this
        PULUMI_STACK = "organization/ptb-spa-iac/dev"
        PULUMI_STATE_CONTAINER = "pulumi-state"
        PULUMI_STATE_ACCOUNT = "ptbpulumi"
    }

    stages {
            stage ("Setup") {
                steps {
                    sh "npm i"
                }
                post {
                    success {
                        echo "Setup success"
                    }
                    failure {
                        echo "Setup failure"
                    }
                }
                
            }

            stage ("Build") {
                steps {
                    sh "npm run build"
                }
                post {
                    success {
                        echo "Build success"
                    }
                    failure {
                        echo "Build failure"
                    }
                }
            }

            stage ("Quality Gate: Static Analysis") {
                steps {
                    sh "npm run lint:ci"
                    sh "npm run prettier:ci"
                }
                post {
                    success {
                        echo "Static Analysis Success"
                    }
                    failure {
                        echo "Static Analysis Failure"
                    }
                }
            }

            stage ("Quality Gate: Composition Analysis") {
                steps {
                    sh "npm run test:ci"
                }
                post {
                    success {
                        echo "Quality composition analysis success"
                    }
                    failure {
                        echo "Quality composition analysis failure"
                    }
                }
            }

            stage ("Report") {
                steps {
                    clover(cloverReportDir: '../dist/coverage', cloverReportFileName: 'clover.xml',
                      healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                      unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                      failingTarget: [methodCoverage: 25, conditionalCoverage: 25, statementCoverage: 25]
                    )
                    junit 'dist/junit/junit.xml'
                }
                post {
                    success {
                        echo "Report success"
                    }
                    failure {
                        echo "Report failure"
                    }
                }
            }

            stage ("Publish to Docker Hub") {
                when {
                    anyOf{
                        branch 'master'
                    }
                }
                steps {
                    script {
                        def packageJson = readJSON(file: 'package.json')
                        env.VERSION = packageJson.version
                        env.IMAGE_TAG = "${env.BRANCH_NAME}-v${env.VERSION}"

                        sh "docker build -t $DOCKER_IMAGE:${env.IMAGE_TAG} ."
                    }
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                        sh "docker push $DOCKER_IMAGE:${env.IMAGE_TAG}"
                    }
                }
                post {
                    always {
                        sh "docker rmi $DOCKER_IMAGE:${env.IMAGE_TAG} || true"                   
                    } 
                }
            }

            stage ("Deploy") {

                when {
                    anyOf {
                        branch 'master';
                    }
                }

                steps {
                    // install pulumi cli
                    sh "curl -fsSL https://get.pulumi.com | sh"
                    sh "$HOME/.pulumi/bin/pulumi version"


                    // Provide service principal login values required for pulumi login and pulumi up
                    withCredentials([azureServicePrincipal('AZURE_PRINCIPAL_LOGIN')]){

                        // provide pulumi cli on path
                        withEnv(["PATH+PULUMI=$HOME/.pulumi/bin"]) {

                            // provide the connection string to access the pulumi backend state stored in storaged account
                            withCredentials([string(credentialsId: 'AZURE_STORAGE_CONNECTION_STRING', variable: "AZURE_STORAGE_CONNECTION_STRING")]) {
                                sh "pulumi login azblob://$PULUMI_STATE_CONTAINER?storage_account=$PULUMI_STATE_ACCOUNT"

                                dir("iac") {
                                    sh "npm i"
                                    sh "pulumi stack select $PULUMI_STACK"

                                    // provide the passphrase to decrypt the pulumi configuration
                                    withCredentials([string(credentialsId: 'PULUMI_CONFIG_PASSPHRASE', variable: "PULUMI_CONFIG_PASSPHRASE")]) {
                                        // provide the azure service principal login values required for pulumi up
                                        withEnv([
                                            "ARM_CLIENT_ID=${AZURE_CLIENT_ID}",
                                            "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}",
                                            "ARM_TENANT_ID=${AZURE_TENANT_ID}",
                                            "ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}"
                                        ]) {
                                            sh "pulumi up --yes"
                                        }
                                    }
                                }  
                            }
                        }
                    }
                }
                post {
                    success {
                        echo "Deploy success"
                    }
                    failure {
                        echo "Deploy failure"
                    }
                }
            }
        
    }

}
